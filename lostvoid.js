document.addEventListener('DOMContentLoaded', () => {
    const strategies = {
        search: "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∏—Å–∫–∞ —Ä–µ–∑–æ–Ω–∞—Ç–æ—Ä–æ–≤",
        treasure: "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ—Ö–æ—Ç—ã –∑–∞ —Å–æ–∫—Ä–æ–≤–∏—â–∞–º–∏",
        armament: "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–ª–Ω–æ–≥–æ –≤–æ–æ—Ä—É–∂–µ–Ω–∏—è",
        business: "–ë–∏–∑–Ω–µ—Å-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è",
        recovery: "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è",
        raiders: "–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ö–∏—Ç—Ä—ã—Ö —Ä–µ–π–¥–µ—Ä–æ–≤",
        defense: "–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å—Ç–æ–π–∫–æ–π –æ–±–æ—Ä–æ–Ω—ã",
        risks: "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ—Å–æ–∑–Ω–∞–Ω–∏—è —Ä–∏—Å–∫–æ–≤",
        reinforcement: "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏—è"
    };

    const items = [
        "[–°—É–ø–µ—Ä—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å] –†–∏—Ç–º–∏—á–µ—Å–∫–∏–π —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å",
        "[–°—É–ø–µ—Ä—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å] –ú–µ—à–æ—á–µ–∫ —ç–Ω–µ—Ä–≥–∏–∏ –¶–∏",
        "[–õ–æ–≤–∫–æ—Å—Ç—å] –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π —â–∏—Ç –ª–æ–≤–∫–æ—Å—Ç–∏",
        "[–õ–æ–≤–∫–æ—Å—Ç—å] –¢–∞–ª–∏—Å–º–∞–Ω –ø—è—Ç–∏ –º–∏—Ä–æ–≤",
        "[–ê–Ω–æ–º–∞–ª–∏—è - –£—Å—Ç—Ä–∞—à–µ–Ω–∏–µ] –≠–ª–∏–∫—Å–∏—Ä —Ö–∞–æ—Å–∞",
        "[–ê–Ω–æ–º–∞–ª–∏—è - –£—Å—Ç—Ä–∞—à–µ–Ω–∏–µ] –ü—É—à–∫–∞ –¥–ª—è —Å—Ç—Ä–µ–ª—å–±—ã —Ä–∞—Å—Ç–≤–æ—Ä–∏—Ç–µ–ª–µ–º",
        "[–°—Ç–æ–π–∫–æ—Å—Ç—å] –î–æ—â–µ—á–∫–∞ —Å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ–º",
        "[–°—Ç–æ–π–∫–æ—Å—Ç—å] –¢–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∞–ø—Ç–µ—á–∫–∞"
    ];

    const gridContainer = document.querySelector('.grid-container');
    const statusMessage = document.querySelector('.status-message');
    const strategyButtons = document.querySelectorAll('.strategy-button');

    let currentStrategy = 'search';

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    const savedData = JSON.parse(localStorage.getItem('strategies')) || {};

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    Object.keys(strategies).forEach(strategy => {
        if (!savedData[strategy]) {
            savedData[strategy] = {};
            items.forEach(item => {
                savedData[strategy][item] = 1; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Ä–æ–≤–µ–Ω—å 1
            });
        }
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    localStorage.setItem('strategies', JSON.stringify(savedData));

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
    function renderCards(strategy) {
        gridContainer.innerHTML = '';
        items.forEach(item => {
            const card = document.createElement('div');
            card.classList.add('card');
            card.setAttribute('data-id', `${strategy}-${item}`);
            card.innerHTML = `
                <img src="lostvoidpics/${item.replace(/[\[\]]/g, '').toLowerCase()}.jpg" alt="${item}">
                <h3>${item}</h3>
                <div class="levels">
                    <button class="level-button" data-level="1">1</button>
                    <button class="level-button" data-level="2">2</button>
                    <button class="level-button" data-level="3">3</button>
                    <button class="level-button" data-level="4">4</button>
                </div>
            `;
            gridContainer.appendChild(card);
    
            const levelButtons = card.querySelectorAll('.level-button');
            const savedLevel = savedData[strategy][item];
            updateCardLevel(card, savedLevel, item); // –ü–µ—Ä–µ–¥–∞—ë–º item –∑–¥–µ—Å—å
    
            levelButtons.forEach(button => {
                button.addEventListener('click', () => {
                    const level = button.getAttribute('data-level');
                    savedData[strategy][item] = level;
                    localStorage.setItem('strategies', JSON.stringify(savedData));
                    updateCardLevel(card, level, item); // –ü–µ—Ä–µ–¥–∞—ë–º item –∑–¥–µ—Å—å
                    checkCompletion();
                });
            });
        });
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –∫–∞—Ä—Ç–æ—á–∫–∏
    function updateCardLevel(card, level, item) {
        const levelButtons = card.querySelectorAll('.level-button');
        levelButtons.forEach(button => {
            button.classList.remove('selected');
            if (button.getAttribute('data-level') === level) {
                button.classList.add('selected');
            }
        });
    
        // –í—ã—á–∏—Å–ª—è–µ–º –≤—ã—Å–æ—Ç—É –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è (0% –¥–ª—è —É—Ä–æ–≤–Ω—è 1, 33% –¥–ª—è —É—Ä–æ–≤–Ω—è 2, 66% –¥–ª—è —É—Ä–æ–≤–Ω—è 3, 100% –¥–ª—è —É—Ä–æ–≤–Ω—è 4)
        const progressHeight = ((level - 1) / 3) * 100;
        card.style.setProperty('--progress-height', `${progressHeight}%`);
    
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞
        if (level >= 3) {
            card.classList.add('filled');
        } else {
            card.classList.remove('filled');
        }
    
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ 4 —É—Ä–æ–≤–µ–Ω—å –≤ –ª—é–±–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        const isMaxLevelReached = checkIfMaxLevelReached(item);
        const statusMessage = card.querySelector('.status-message');
        if (isMaxLevelReached) {
            if (!statusMessage) {
                const message = document.createElement('div');
                message.classList.add('status-message');
                message.innerHTML = 'üåü –ü–æ–ª—É—á–µ–Ω 4 —É—Ä–æ–≤–µ–Ω—å, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—É—á–∏—Ç—å 3 —É—Ä–æ–≤–µ–Ω—å';
                card.appendChild(message);
            }
        } else {
            if (statusMessage) {
                statusMessage.remove();
            }
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ 4 —É—Ä–æ–≤–µ–Ω—å –≤ –ª—é–±–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    function checkIfMaxLevelReached(item) {
        for (const strategy in savedData) {
            if (savedData[strategy][item] === '4') {
                return true;
            }
        }
        return false;
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    function checkCompletion() {
        const currentLevels = Object.values(savedData[currentStrategy]);
        const allLevelsCompleted = currentLevels.every(level => level >= 3);
        const allLevelsMaxed = currentLevels.every(level => level === 4);

        if (allLevelsMaxed) {
            statusMessage.textContent = '–í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–æ—Å—Ç–∏–≥–ª–∏ 4 —É—Ä–æ–≤–Ω—è!';
        } else if (allLevelsCompleted) {
            statusMessage.textContent = '–í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–æ—Å—Ç–∏–≥–ª–∏ 3 —É—Ä–æ–≤–Ω—è, –Ω–∞–≥—Ä–∞–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞!';
        } else {
            statusMessage.textContent = '';
        }
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
    strategyButtons.forEach(button => {
        button.addEventListener('click', () => {
            currentStrategy = button.getAttribute('data-strategy');
            renderCards(currentStrategy);
            checkCompletion();
        });
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    renderCards(currentStrategy);
    checkCompletion();
});
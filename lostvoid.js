document.addEventListener('DOMContentLoaded', () => {
    const strategies = {
        search: "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∏—Å–∫–∞ —Ä–µ–∑–æ–Ω–∞—Ç–æ—Ä–æ–≤",
        treasure: "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ—Ö–æ—Ç—ã –∑–∞ —Å–æ–∫—Ä–æ–≤–∏—â–∞–º–∏",
        armament: "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–ª–Ω–æ–≥–æ –≤–æ–æ—Ä—É–∂–µ–Ω–∏—è",
        business: "–ë–∏–∑–Ω–µ—Å-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è",
        recovery: "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è",
        raiders: "–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ö–∏—Ç—Ä—ã—Ö —Ä–µ–π–¥–µ—Ä–æ–≤",
        defense: "–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å—Ç–æ–π–∫–æ–π –æ–±–æ—Ä–æ–Ω—ã",
        risks: "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ—Å–æ–∑–Ω–∞–Ω–∏—è —Ä–∏—Å–∫–æ–≤",
        reinforcement: "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏—è"
    };

    const items = [
        "[–°—É–ø–µ—Ä—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å] –†–∏—Ç–º–∏—á–µ—Å–∫–∏–π —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å",
        "[–°—É–ø–µ—Ä—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å] –ú–µ—à–æ—á–µ–∫ —ç–Ω–µ—Ä–≥–∏–∏ –¶–∏",
        "[–ê–Ω–æ–º–∞–ª–∏—è - –£—Å—Ç—Ä–∞—à–µ–Ω–∏–µ] –ü—É—à–∫–∞ –¥–ª—è —Å—Ç—Ä–µ–ª—å–±—ã —Ä–∞—Å—Ç–≤–æ—Ä–∏—Ç–µ–ª–µ–º",
        "[–ê–Ω–æ–º–∞–ª–∏—è - –£—Å—Ç—Ä–∞—à–µ–Ω–∏–µ] –≠–ª–∏–∫—Å–∏—Ä —Ö–∞–æ—Å–∞",
        "[–õ–æ–≤–∫–æ—Å—Ç—å] –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π —â–∏—Ç –ª–æ–≤–∫–æ—Å—Ç–∏",
        "[–õ–æ–≤–∫–æ—Å—Ç—å] –¢–∞–ª–∏—Å–º–∞–Ω –ø—è—Ç–∏ –º–∏—Ä–æ–≤",
        "[–°—Ç–æ–π–∫–æ—Å—Ç—å] –¢–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∞–ø—Ç–µ—á–∫–∞",
        "[–°—Ç–æ–π–∫–æ—Å—Ç—å] –î–æ—â–µ—á–∫–∞ —Å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ–º"
    ];

    const gridContainer = document.querySelector('.strategies-mode .grid-container');
    const levelsContainer = document.querySelector('.levels-mode .grid-container');
    const statusMessage = document.querySelector('.status-message');
    const strategyButtons = document.querySelectorAll('.strategy-button');
    const modeButtons = document.querySelectorAll('.mode-button');
    const strategiesMode = document.querySelector('.strategies-mode');
    const levelsMode = document.querySelector('.levels-mode');

    let currentStrategy = 'search';

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    const savedLevels = JSON.parse(localStorage.getItem('levels')) || {};
    const savedStrategies = JSON.parse(localStorage.getItem('strategies')) || {};

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    items.forEach(item => {
        if (!savedLevels[item]) {
            savedLevels[item] = 1; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Ä–æ–≤–µ–Ω—å 1
        }
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    Object.keys(strategies).forEach(strategy => {
        if (!savedStrategies[strategy]) {
            savedStrategies[strategy] = {};
            items.forEach(item => {
                savedStrategies[strategy][item] = false; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
            });
        }
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    localStorage.setItem('levels', JSON.stringify(savedLevels));
    localStorage.setItem('strategies', JSON.stringify(savedStrategies));

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ —Ä–µ–∂–∏–º–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    function renderCards(strategy) {
        gridContainer.innerHTML = '';
        items.forEach(item => {
            const card = document.createElement('div');
            card.classList.add('card');
            card.setAttribute('data-id', `${strategy}-${item}`);
            card.innerHTML = `
                <img src="lostvoidpics/${item.replace(/[\[\]]/g, '').toLowerCase()}.jpg" alt="${item}">
                <h3>${item}</h3>
                <div class="completion">
                    <button class="complete-button">${savedStrategies[strategy][item] ? '‚úÖ' : '‚ùå'}</button>
                </div>
            `;
            gridContainer.appendChild(card);
    
            const completeButton = card.querySelector('.complete-button');
            completeButton.addEventListener('click', () => {
                savedStrategies[strategy][item] = !savedStrategies[strategy][item];
                localStorage.setItem('strategies', JSON.stringify(savedStrategies));
                completeButton.textContent = savedStrategies[strategy][item] ? '‚úÖ' : '‚ùå';
                updateCardLevel(card, savedLevels[item], item, true); // –ü–µ—Ä–µ–¥–∞—ë–º isStrategyMode = true
                checkCompletion();
            });
    
            // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
            updateCardLevel(card, savedLevels[item], item, true); // –ü–µ—Ä–µ–¥–∞—ë–º isStrategyMode = true
        });
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ —Ä–µ–∂–∏–º–µ —É—Ä–æ–≤–Ω–µ–π
    function renderLevels() {
        levelsContainer.innerHTML = '';
        items.forEach(item => {
            const card = document.createElement('div');
            card.classList.add('card');
            card.setAttribute('data-id', `levels-${item}`);
            card.innerHTML = `
                <img src="lostvoidpics/${item.replace(/[\[\]]/g, '').toLowerCase()}.jpg" alt="${item}">
                <h3>${item}</h3>
                <div class="levels">
                    <button class="level-button" data-level="1">1</button>
                    <button class="level-button" data-level="2">2</button>
                    <button class="level-button" data-level="3">3</button>
                    <button class="level-button" data-level="4">4</button>
                </div>
            `;
            levelsContainer.appendChild(card);
    
            const levelButtons = card.querySelectorAll('.level-button');
            const currentLevel = savedLevels[item];
            updateCardLevel(card, currentLevel, item); // isStrategyMode = false –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
            levelButtons.forEach(button => {
                button.addEventListener('click', () => {
                    const level = button.getAttribute('data-level');
                    savedLevels[item] = level;
                    localStorage.setItem('levels', JSON.stringify(savedLevels));
                    updateCardLevel(card, level, item); // isStrategyMode = false –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                });
            });
        });
    }
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –∫–∞—Ä—Ç–æ—á–∫–∏
    function updateCardLevel(card, level, item, isStrategyMode = false) {
        const levelButtons = card.querySelectorAll('.level-button');
        levelButtons.forEach(button => {
            button.classList.remove('selected');
            if (button.getAttribute('data-level') === level) {
                button.classList.add('selected');
            }
        });
    
        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–µ–ª—ë–Ω—ã–º —Ü–≤–µ—Ç–æ–º
        if (isStrategyMode) {
            // –í —Ä–µ–∂–∏–º–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ—Ç–º–µ—Ç–∫–∏ "‚úÖ"
            const isCompleted = savedStrategies[currentStrategy][item];
            card.style.setProperty('--progress-height', isCompleted ? '100%' : '0%');
        } else {
            // –í —Ä–µ–∂–∏–º–µ —É—Ä–æ–≤–Ω–µ–π –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Ä–æ–≤–Ω—è
            const progressHeight = ((level - 1) / 3) * 100;
            card.style.setProperty('--progress-height', `${progressHeight}%`);
        }
    
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–¥–ø–∏—Å—å, –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å ‚â• 4
        const statusMessage = card.querySelector('.status-message');
        if (level >= 4) {
            if (!statusMessage) {
                const message = document.createElement('div');
                message.classList.add('status-message');
                message.innerHTML = 'üåü –ü–æ–ª—É—á–µ–Ω 4 —É—Ä–æ–≤–µ–Ω—å, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—É—á–∏—Ç—å 3 —É—Ä–æ–≤–µ–Ω—å';
                card.appendChild(message);
            }
        } else {
            if (statusMessage) {
                statusMessage.remove();
            }
        }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    function saveState() {
        const state = {
            mode: levelsMode.style.display === 'block' ? 'levels' : 'strategies',
            strategy: currentStrategy
        };
        localStorage.setItem('appState', JSON.stringify(state));
    }

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    function restoreState() {
        const savedState = JSON.parse(localStorage.getItem('appState'));
        if (savedState) {
            if (savedState.mode === 'levels') {
                document.getElementById('mode-levels').click(); // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Ä–µ–∂–∏–º —É—Ä–æ–≤–Ω–µ–π
            } else {
                document.getElementById('mode-strategies').click(); // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Ä–µ–∂–∏–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
                currentStrategy = savedState.strategy;
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                strategyButtons.forEach(button => {
                    if (button.getAttribute('data-strategy') === currentStrategy) {
                        button.classList.add('active');
                    } else {
                        button.classList.remove('active');
                    }
                });
                renderCards(currentStrategy);
            }
        }
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
    strategyButtons.forEach(button => {
        button.addEventListener('click', () => {
            strategyButtons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');
            currentStrategy = button.getAttribute('data-strategy');
            renderCards(currentStrategy);
            saveState(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        });
    });

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏
    modeButtons.forEach(button => {
        button.addEventListener('click', () => {
            modeButtons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');
    
            if (button.id === 'mode-levels') {
                strategiesMode.style.display = 'none';
                levelsMode.style.display = 'block';
                renderLevels();
            } else {
                strategiesMode.style.display = 'block';
                levelsMode.style.display = 'none';
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                strategyButtons.forEach(button => {
                    if (button.getAttribute('data-strategy') === currentStrategy) {
                        button.classList.add('active');
                    } else {
                        button.classList.remove('active');
                    }
                });
                renderCards(currentStrategy);
            }
    
            saveState(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        });
    });
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    restoreState();
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –≤—ã–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ —Ä–µ–∂–∏–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    //strategyButtons[0].classList.add('active');
    //modeButtons[1].classList.add('active');
    renderCards(currentStrategy);
});